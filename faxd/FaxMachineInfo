#ident $Header: /d/sam/flexkit/fax/faxd/RCS/FaxMachineInfo.c++,v 1.2 91/05/23 12:25:35 sam Exp $

/*
 * Copyright (c) 1991 by Sam Leffler.
 * All rights reserved.
 *
 * This file is provided for unrestricted use provided that this
 * legend is included on all tape media and as a part of the
 * software program in whole or part.  Users may copy, modify or
 * distribute this file at will.
 */
#include <ctype.h>
#include <unistd.h>
#include "FaxMachineInfo.h"

#include "config.h"

const fxStr FaxMachineInfo::infoDir(FAX_INFODIR);

static FILE*
openInfoFile(const fxStr& number, const char* mode)
{
    fxStr canon(number);
    for (int i = canon.length()-1; i >= 0; i--)
	if (!isdigit(canon[i]))
	    canon.remove(i,1);
    return fopen(FaxMachineInfo::infoDir | "/" | canon, mode);
}

FaxMachineInfo::FaxMachineInfo()
{
    supportsHighRes = FALSE;
    supports2DEncoding = FALSE;
    maxPageWidth = 1728;		// 1728 at 215 mm
    maxPageLength = 297;		// ISO A4
}

int
FaxMachineInfo::operator==(const FaxMachineInfo& other) const
{
    return (supportsHighRes == other.supportsHighRes &&
	supports2DEncoding == other.supports2DEncoding &&
	maxPageWidth == other.maxPageWidth &&
	maxPageLength == other.maxPageLength);
}

int
FaxMachineInfo::operator!=(const FaxMachineInfo& other) const
    { return !(*this == other); }

#define	isCmd(cmd)	(strcasecmp(line, cmd) == 0)

void
FaxMachineInfo::restore(const fxStr& number)
{
    FILE* fp = openInfoFile(number, "r");
    if (fp) {
	restore(fp);
	fclose(fp);
    }
}

static const char* putBoolean(fxBool b)
    { return (b ? "yes" : "no"); }
static fxBool getBoolean(const char* cp)
    { return (strcasecmp(cp, "on") == 0 || strcasecmp(cp, "yes") == 0); }

void
FaxMachineInfo::restore(FILE* fp)
{
    char line[1024];
    char* cp;
    // XXX maybe use object transcription!!!
    while (fgets(line, sizeof (line) - 1, fp)) {
	if (line[0] == '#')
	    continue;
	if (cp = strchr(line, '\n'))
	    *cp = '\0';
	char* tag = strchr(line, ':');
	if (!tag)
	    continue;
	*tag++ = '\0';
	while (isspace(*tag))
	    tag++;
	if (isCmd("supportsHighRes"))
	    supportsHighRes = getBoolean(tag);
	else if (isCmd("supports2DEncoding"))
	    supports2DEncoding = getBoolean(tag);
	else if (isCmd("maxPageWidth"))
	    maxPageWidth = atoi(tag);
	else if (isCmd("maxPageLength"))
	    maxPageLength = atoi(tag);
    }
}

void
FaxMachineInfo::save(const fxStr& number) const
{
    FILE* fp = openInfoFile(number, "w");
    if (fp) {
	fprintf(fp, "supportsHighRes: %s\n", putBoolean(supportsHighRes));
	fprintf(fp, "supports2DEncoding: %s\n", putBoolean(supports2DEncoding));
	fprintf(fp, "maxPageWidth: %d\n", maxPageWidth);
	fprintf(fp, "maxPageLength: %d\n", maxPageLength);
	fclose(fp);
    }
}
